name: TICKET-MATE-BE-SCHEMA-VERIFY

on:
  pull_request:
    branches:
      - deploy
      - main
      - test

jobs:
  schema-verify:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:17-alpine
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: postgres
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready -U postgres"
          --health-interval 5s
          --health-timeout 5s
          --health-retries 20

    steps:
      - name: 코드 체크아웃
        uses: actions/checkout@v4

      - name: 디렉터리 준비
        run: mkdir -p ticketmate-api/build/generated

      - name: JDK 설정
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: 'gradle'

      - name: Gradle Wrapper 실행권한 부여
        run: chmod +x gradlew

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4

      - name: Postgres 준비 확인 (컨테이너 클라이언트)
        run: |
          for i in {1..30}; do
            if docker run --rm --network=host postgres:17-alpine \
              pg_isready -h localhost -p 5432 -U postgres; then
              echo "✅ Postgres 준비 완료"
              exit 0
            fi
            echo "⏳ DB 준비 대기중... ($i/30)"
            sleep 2
          done
          echo "❌ Postgres가 준비되지 않았습니다." && exit 1

      - name: Flyway 마이그레이션 적용 (Docker)
        run: |
          docker run --rm --network=host \
            -v "$PWD/ticketmate-api/src/main/resources/db/migration":/flyway/sql \
            flyway/flyway:10 \
            -url=jdbc:postgresql://localhost:5432/postgres \
            -user=postgres -password=postgres \
            -baselineOnMigrate=true \
            -locations=filesystem:/flyway/sql \
            migrate

      - name: Flyway 결과 스키마 덤프
        run: |
          mkdir -p ticketmate-api/build/generated
          docker run --rm --network=host -e PGPASSWORD=postgres postgres:17-alpine \
            pg_dump -s -h localhost -U postgres -d postgres \
            > ticketmate-api/build/generated/flyway-schema.sql
          echo "📝 Flyway 스키마 라인 수:" $(wc -l < ticketmate-api/build/generated/flyway-schema.sql)

      - name: Hibernate DDL 생성 (스프링 미사용)
        run: |
          ./gradlew :ticketmate-api:test \
            --tests "com.ticketmate.backend.api.application.schema.HibernateDdlGeneratorTest" \
            --info
          echo "📝 Hibernate DDL 라인 수:" $(wc -l < ticketmate-api/build/generated/hibernate-ddl.sql)

      - name: 정규화 & 비교
        run: |
          python3 scripts/normalize_sql.py \
            ticketmate-api/build/generated/hibernate-ddl.sql \
            ticketmate-api/build/generated/flyway-schema.sql \
          && echo "✅ 스키마 일치"
        shell: bash

      - name: 차이 출력(불일치 시)
        if: failure()
        run: |
          echo "❌ 스키마가 다릅니다. 정규화 결과(diff) 출력:"
          diff -u \
            ticketmate-api/build/generated/hibernate-ddl.sql.norm \
            ticketmate-api/build/generated/flyway-schema.sql.norm || true

      - name: 아티팩트 업로드
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: schema-compare-artifacts
          path: |
            ticketmate-api/build/generated/*.sql
            ticketmate-api/build/generated/*.norm
