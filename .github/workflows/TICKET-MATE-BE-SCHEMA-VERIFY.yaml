name: TICKET-MATE-BE-SCHEMA-VERIFY

on:
  pull_request:
    branches: [deploy, main, test]

jobs:
  schema-verify:
    runs-on: ubuntu-latest

    # 🔧 모든 경로를 한 곳(env)에서 정의
    env:
      WORK_DIR: ${{ github.workspace }}
      MODULE: ticketmate-api
      GEN_DIR: ${{ github.workspace }}/ticketmate-api/build/generated
      HIB_DDL: ${{ github.workspace }}/ticketmate-api/build/generated/hibernate-ddl.sql
      FLY_SCHEMA: ${{ github.workspace }}/ticketmate-api/build/generated/flyway-schema.sql
      NORMALIZE_PY: ${{ github.workspace }}/scripts/sql/normalize_sql.py
      COMPARE_SH: ${{ github.workspace }}/scripts/sql/schema-compare.sh

    services:
      postgres:
        image: postgres:17-alpine
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: postgres
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready -U postgres"
          --health-interval 5s
          --health-timeout 5s
          --health-retries 20

    steps:
      - name: 코드 체크아웃
        uses: actions/checkout@v4

      - name: 디렉터리 준비
        run: mkdir -p "$GEN_DIR"

      - name: JDK 설정
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: 'gradle'

      - name: Gradle Wrapper 실행권한 부여
        run: chmod +x gradlew

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4

      - name: Postgres 준비 확인 (컨테이너 클라이언트)
        run: |
          for i in {1..30}; do
            if docker run --rm --network=host postgres:17-alpine \
              pg_isready -h localhost -p 5432 -U postgres; then
              echo "✅ Postgres 준비 완료"
              exit 0
            fi
            echo "⏳ DB 준비 대기중... ($i/30)"
            sleep 2
          done
          echo "❌ Postgres가 준비되지 않았습니다." && exit 1

      - name: Flyway 마이그레이션 적용 (Docker)
        run: |
          docker run --rm --network=host \
            -v "$WORK_DIR/${MODULE}/src/main/resources/db/migration":/flyway/sql \
            flyway/flyway:10 \
            -url=jdbc:postgresql://localhost:5432/postgres \
            -user=postgres -password=postgres \
            -baselineOnMigrate=true \
            -locations=filesystem:/flyway/sql \
            migrate

      - name: Flyway 결과 스키마 덤프
        run: |
          docker run --rm --network=host -e PGPASSWORD=postgres postgres:17-alpine \
            pg_dump -s -h localhost -U postgres -d postgres > "$FLY_SCHEMA"
          echo "📝 Flyway 스키마 라인 수:" $(wc -l < "$FLY_SCHEMA")

      - name: Flyway DDL 스냅샷 확인/출력
        run: |
          if [ -f "$FLY_SCHEMA" ]; then
            echo "✅ Flyway 스키마 덤프 존재: $FLY_SCHEMA"
            echo "----- [처음 60줄] -----"
            sed -n '1,60p' "$FLY_SCHEMA"
            echo "----- [마지막 30줄] -----"
            tail -n 30 "$FLY_SCHEMA"
          else
            echo "❌ Flyway 스키마 파일을 찾을 수 없습니다: $FLY_SCHEMA"
            echo "📂 현재 생성 디렉터리 목록:"
            ls -la "$GEN_DIR" || true
            exit 1
          fi

      - name: Hibernate DDL 생성 (스프링 미사용)
        run: |
          ./gradlew :${MODULE}:test --tests '*HibernateDdlGeneratorTest' --info
          echo "📝 Hibernate DDL 라인 수:" $(wc -l < "$HIB_DDL")

      - name: Hibernate DDL 스냅샷 확인/출력
        run: |
          if [ -f "$HIB_DDL" ]; then
            echo "✅ Hibernate DDL 존재: $HIB_DDL"
            echo "----- [처음 60줄] -----"
            sed -n '1,60p' "$HIB_DDL"
            echo "----- [마지막 30줄] -----"
            tail -n 30 "$HIB_DDL"
          else
            echo "❌ Hibernate DDL 파일을 찾을 수 없습니다: $HIB_DDL"
            echo "📂 현재 생성 디렉터리 목록:"
            ls -la "$GEN_DIR" || true
            exit 1
          fi

      - name: 비교 스크립트 실행 (정규화 + 비교 + diff)
        run: |
          chmod +x "$COMPARE_SH"
          "$COMPARE_SH"
        shell: bash

      - name: 아티팩트 업로드
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: schema-compare-artifacts
          path: |
            ${{ env.GEN_DIR }}/*.sql
            ${{ env.GEN_DIR }}/*.norm
