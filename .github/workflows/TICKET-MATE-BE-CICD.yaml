name: TICKET-MATE-BE-CICD

on:
  push:
    branches:
      - main
      - test

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: 코드 체크아웃
        uses: actions/checkout@v4

      - name: JDK 17 설정
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Gradle 최적 설정
        uses: gradle/actions/setup-gradle@v4

      - name: Gradle Wrapper 실행권한 부여
        run: chmod +x gradlew

      - name: Github Secret 내부 설정 파일 동적 생성
        shell: bash
        run: |
          echo "${{ secrets.TICKETMATE_FIREBASE_KEY_JSON }}" | sed 's/\\n/\n/g' > ticketmate-api/src/main/resources/ticketmate-firebase-key.json
          cat << 'EOF' > ticketmate-api/src/main/resources/static/firebase-messaging-sw.js
          ${{ secrets.FIREBASE_MESSAGING_SW_JS }}
          EOF
          echo "${{ secrets.TICKETMATE_EMBEDDING_JSON }}" | sed 's/\\n/\n/g' > ticketmate-api/src/main/resources/ticketmate-embedding.json
          echo "${{ secrets.CONFIG_IMPORTS_YML }}" > ticketmate-api/src/main/resources/config-imports.yml
          echo "${{ secrets.OAUTH2_YML }}" > ticketmate-api/src/main/resources/oauth2.yml
          echo "${{ secrets.AWS_S3_YML }}" > ticketmate-api/src/main/resources/aws-s3.yml
          echo "${{ secrets.MESSAGING_YML }}" > ticketmate-api/src/main/resources/messaging.yml
          echo "${{ secrets.SPRINGDOC_YML }}" > ticketmate-api/src/main/resources/springdoc.yml
          echo "${{ secrets.ADMIN_YML }}" > ticketmate-api/src/main/resources/admin.yml
          echo "${{ secrets.APPLICATION_PROD_YML }}" > ticketmate-api/src/main/resources/application-prod.yml

      # prod 프로파일을 활성화하여 빌드 ( 테스트 코드 테스트 X )
      - name: Build with Gradle
        run: ./gradlew build -x test -Dspring.profiles.active=prod

      - name: Docker 빌드환경 설정
        uses: docker/setup-buildx-action@v3

      - name: DockerHub 로그인
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ hashFiles('Dockerfile') }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Docker 이미지 빌드 및 푸시
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/ticket-mate-back:${{ github.ref_name }}
          cache-from: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/ticket-mate-back:cache
          cache-to: type=inline

  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to Server
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          password: ${{ secrets.SERVER_PASSWORD }}
          port: ${{ secrets.SERVER_PORT }}
          script: |
            set -eo pipefail
            trap 'echo "[ERROR] 배포 중 오류 발생!"' ERR
            
            echo "환경변수 설정.."
            export PATH=$PATH:/usr/local/bin
            export PW=${{ secrets.SERVER_PASSWORD }}
            BRANCH=${{ github.ref_name }}
            PORT=8080
            IMAGE=${{ secrets.DOCKERHUB_USERNAME }}/ticket-mate-back:${BRANCH}
            CONTAINER_NAME="ticket-mate-back"
            
            case "$BRANCH" in
              main)
                PORT=8087
                ;;
              test)
                CONTAINER_NAME="ticket-mate-back-test"
                PORT=8088
                ;;
              depoly)
                CONTAINER_NAME="ticket-mate-back-deploy"
                PORT=8089
            esac
            
            echo "브랜치: $BRANCH"
            echo "컨테이너 이름: $CONTAINER_NAME"
            echo "포트: $PORT"
            
            echo "도커 이미지 풀 : $IMAGE"
            echo $PW | sudo -S docker pull $IMAGE
            
            echo "컨테이너 $CONTAINER_NAME 존재 여부 확인 중..."
            if sudo docker ps -a --format '{{.Names}}' | grep -Eq "^${CONTAINER_NAME}\$"; then
              echo "컨테이너 $CONTAINER_NAME 이(가) 존재합니다. 중지 및 삭제 중..."
              echo $PW | sudo -S docker rm -f $CONTAINER_NAME
              echo "컨테이너 $CONTAINER_NAME 이(가) 삭제되었습니다."
            else
              echo "존재하는 컨테이너 $CONTAINER_NAME 이(가) 없습니다."
            fi

            echo "새로운 컨테이너 $CONTAINER_NAME 실행 중..."
            echo $PW | sudo -S docker run -d -p ${PORT}:8080 --name $CONTAINER_NAME \
              -e TZ=Asia/Seoul \
              -e "SPRING_PROFILES_ACTIVE=prod" \
              -v /etc/localtime:/etc/localtime:ro \
              -v /home/ticketmate98/Desktop/projects/ticket-mate:/mnt/ticket-mate \
              $IMAGE
            
            # <none> 태그로 남은 이미지 정리
            echo "불필요한 dangling(<none>) 이미지 정리..."
            echo $PW | sudo -S docker image prune -af
            
            echo "배포가 성공적으로 완료되었습니다."
